model Q5
--------------------------
enum CauseOfDeath {EUTANASIA,SUICIDIO,HOMICIDIO,NATURAL,ACCIDENTE}

-----Clases-----
class Person
attributes
    birthYear:Integer
    deathYear:Integer init = null
    age:Integer
    causeOfDeath:CauseOfDeath
    isDead:Boolean
    married : Boolean init= false
    stage:Integer

    operations
        isMarried():Boolean
            begin
                if (self.wife.startYear->size() + self.husband.startYear->size()) > 0 then
                    result:=true
                else 
                    result:=false 
                end
            end


        marriages() : Integer
            begin
                result := self.wife -> size() + self.husband -> size()
            end
        addYear()
            begin
        ---        self.age:=self.age+1;
        ---    end
        ---pedirMatrimonio(p.Person)
        ---    begin
        ---
        ---    end
        ---pedirDivorcio(p.Person)
        ---    begin
        ---
        ---    end
        ---aceptarMatrimonio()
        ---    begin
        ---
        ---    end
        ---aceptarDivorcio()
        ---    begin
        ---
        ---    end
end

class Marriage
attributes
    startYear:Integer
    endYear:Integer
end

class Clock
attributes
    NOW:Integer init = 0
    started:Boolean init = false
operations
    tick() 
      begin
        self.NOW:=self.NOW + 1;
        for p in self.community.person do
            if (not p.isDead) then
                p.addYear()
            end
        end    
      end



end

class Community
attributes
    youngAge:Integer
    adultAge:Integer
    oldAge:Integer
end

-----Clases de Asociaci√≥n-------

-----Agregacion----

aggregation IsCommunity between
    Community[0..*] role community
    Clock[1] role clock
end

-----Composicion----
composition PerteneceAComunidad between
    Community[1] role community
    Person[0..*] role person
end
-----Asociaciones-----

association Mujer between
    Person [1] role wife
    Marriage [0..*] role husband
end
association Marido between
    Person [1] role husband
    Marriage [0..*] role wife
end

association PedidaMatrimonio between 
    Person [1] role pretendiente
    Person [1] role pretendido
end

association PedidaDivorcio between 
    Person [1] role divorciador
    Person [1] role divorciado
end


-----Constraints----
constraints

context Person
inv NoMorirAntesDeNacer:
   self.deathYear = null or self.birthYear <= self.deathYear

inv NoNacerEnFuturo:
    self.community.clock.NOW >= self.birthYear

inv NoCasadoConUnoMismo:
    self.husband->forAll(m | m.husband <>self) and self.wife->forAll(m | m.wife <> self)

inv Monogamia:
    self.husband->union(self.wife) -> forAll (m1,m2 | m1<>m2 and m1.startYear < m2.startYear implies m1.endYear < m2.startYear)

inv NoNinosCasados:
    self.age < self.community.youngAge implies self.husband->size() + self.wife->size() = 0

inv NoMatrimonioDespuesMorir:
    self.deathYear <> null implies self.husband -> forAll(x | x.endYear <= self.deathYear)
    and self.wife->forAll(y | y.endYear <= self.deathYear) 

inv NoEutanasiaNiSuicidio:
    self.causeOfDeath <> CauseOfDeath::EUTANASIA and self.causeOfDeath <> CauseOfDeath::SUICIDIO

context Marriage
inv NoDivorcioAntesDeCasamiento:
    self.startYear<self.endYear

inv NoDivorcioSiNoEstasCasado:
    self.startYear = null implies self.endYear = null

inv NoMatrimoniosFuturos:
    self.startYear <= self.wife.community.clock.NOW
--jhdsfdkfkafm


context Clock
inv SoloUnReloj:
    Clock.allInstances()->size() = 1
--aa
