model Q5
--------------------------
-----Clases-----
class Person
attributes
    birthYear:Integer
    deathYear:Integer
    age:Integer
    isDead:Boolean
end

class Marriage
attributes
    startYear:Integer
    endYear:Integer
end

class Clock
attributes
    NOW:Integer
    started:Boolean
end

class Community
attributes
    youngAge:Integer
    adultAge:Integer
    oldAge:Integer
end

-----Clases de Asociaci√≥n-------

-----Agregacion----

aggregation IsCommunity between
    Community[0..*] role community
    Clock[1] role clock
    
end

-----Composicion----
composition PerteneceAComunidad between
    Community[1] role community
    Person[0..*] role person
end
-----Asociaciones-----

association Mujer between
    Person [1] role wife
    Marriage [0..*] role husband
end
association Marido between
    Person [1] role husband
    Marriage [0..*] role wife
end


-----Constraints----
constraints

context Person
inv NoMorirAntesDeNacer:
    self.birthYear < self.deathYear
inv NoNacerEnFuturo:
    self.community.clock.NOW >= self.birthYear
inv NoCasadoConUnoMismo:
    self.husband->forAll(m | m.husband <>self) and self.wife->forAll(m | m.wife <> self)
    --duda de si es asi o inversa
inv Monogamia
    self.husband->select(m | m.endYear=null)->size() + self.wife->select(w | w.endYear=null)->size() <=1
inv NoNinosCasados:
    self.age < self.community.youngAge implies self.husband->size() + self.wife->size() = 0

inv NoMatrimonioDespuesMorir:
    self.deathYear <> null implies self.husband -> forAll(x | x.endYear <= self.deathYear)
    and self.wife->forAll(y | y.endYear <= self.deathYear) 

context Marriage
inv NoDivorcioAntesDeCasamiento:
    self.startYear<self.endYear

inv NoDivorcioSiNoEstasCasado:
    self.startYear = null implies self.endYear = null

inv NoMatrimoniosFuturos:
    self.startYear <= self.wife.community.clock.NOW
--m


context Clock
inv SoloUnReloj:
    Clock.allInstances()->size() <=1
--aa