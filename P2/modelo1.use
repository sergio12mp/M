model ObjectToClassModel

enum TipoDeAtraccion {MONTANARUSA, NORIA}

class Operario
attributes
  disponible : Boolean init=true

end

class Ciudad
end

class Atraccion
attributes
  calle : String
  tipo : TipoDeAtraccion
  run : Boolean init=true
  operations
    para()
      --pre estaFuncionando : self.run = true
      begin 
        --self.Vagon -> forAll ( v | v.detectorActivado = true implies v.atraccion.run = false)
        self.run := false;
      end 
      post parado : not self.run 

    sigue()
      --pre estaParada : self.run = false
      begin
      self.run := true;
      end
      post running : self.run
end

class Dispositvo
attributes
  nAvisosResueltos : Integer init=0

operations
  sumaAvisoResuelto()
  begin
    self.nAvisosResueltos:=self.nAvisosResueltos+1;
  end
end

class ParqueAtracciones
end

class Vagon
attributes
  detectorActivado : Boolean init=false
operations
  falla(cra:CRA)
    begin
      self.detectorActivado:=true;
      insert(self,cra) into AvisaA      
    end
end


class CRA
  operations
    AsignarOperario()
    begin
    declare op:Operario;
    op:= self.dispositivo.operario->any(o |o.disponible);
    op.disponible:=false;
    op.ArreglarFallo();
    insert(op.dispositivo, self) into  Mensaje;
    end
    --pre --Se le envÃ­a un fallo al CRA
   -- post OperarioNoDisponible
end

associationclass Mensaje between
  Dispositvo[0..*] role dispositivo
  CRA[1] role cra

end

------------- Asociaciones ---------------

association AsignadoA between
  Operario[1] role operario
  Dispositvo[1] role dispositivo
end

association TieneAtracciones between
  ParqueAtracciones [1] role parqueAtracciones
  Atraccion [0..*] role atraccion
end

association AvisaA between
  Vagon[0..*] role vagonEnvio
  CRA[1] role craEnvio
end

composition ComponeAtraccion between
  Atraccion[1] role atraccion
  Vagon[1..*] role vagon
end

association SeLocalizaEn between
  Ciudad[1] role ciudad
  ParqueAtracciones[1] role parqueatracciones
end

association TieneDispositivos between
  Dispositvo[0..*] role dispositivoDisponible
  CRA[0..1]role craRecibe
end

association Falla between
  Mensaje[0..1] role mensaje
  Vagon[0..1] role vagon
end


--------- Restricciones ---------------

constraints

context Atraccion
inv EnMarchaImplicaSinFallos:
  self.run=true implies self.vagon -> forAll(detectorActivado=false)

inv ParadaImplicaFallo:
  self.run=false implies self.vagon -> select(v | v.detectorActivado=true) -> size() > 0


context Dispositvo
inv ResueltosNoNegativos:
  self.nAvisosResueltos >= 0
