model ObjectToClassModel

enum TipoDeAtraccion {MONTANARUSA, NORIA}

class Operario
attributes
  disponible : Boolean init=true
operations
  arregla()
    begin
      self.disponible:=true;
      self.vagon.detectorActivado:=false;
      delete(self,self.vagon) from Mantenimiento;
      sumaAvisoResuelto();
    end
    pre estabaRotoYOperarioLibre : self.vagon.detectorActivado = true and self.disponible = false
    post estaArreglado : self.vagon.detectorActivado = false and self.disponible = true
end

class Ciudad
end

class Atraccion
attributes
  calle : String
  tipo : TipoDeAtraccion
  run : Boolean init=true
  operations
    para()
      begin 
        --self.Vagon -> forAll ( v | v.detectorActivado = true implies v.atraccion.run = false)
        self.run := false;
      end 
      pre estaFuncionando : self.run = true
      post parado : not self.run 

    sigue()
      begin
      self.run := true;
      end
      pre estaParada : self.run = false
      post running : self.run

     comprobarEstado()
      begin
        if self.vagon->select(v | v.detectorActivado=true)->size() > 0 then
          self.para();
        else
          self.sigue();
        end;
      end 
end

class Dispositvo
attributes
  nAvisosResueltos : Integer init=0

operations
  sumaAvisoResuelto()
  begin
    self.nAvisosResueltos:=self.nAvisosResueltos+1;
  end
  post : self.nAvisosResueltos = self.nAvisosResueltos@pre + 1
end

class ParqueAtracciones
end

class Vagon
attributes
  detectorActivado : Boolean init=false
operations
  falla(cra:CRA)
    begin
      self.detectorActivado:=true;
      insert(self,cra) into AvisaA      
    end
    pre NoPuedeFallarSiYaFalla: self.detectorActivado=false;
    post : self.detectorActivado=true;
end


class CRA
  operations
    AsignarOperario(vagon:Vagon)
    begin
    declare op:Operario;
      op:= self.dispositivo.operario->any(o |o.disponible);
      op.disponible:=false;
      insert(op, vagon) into  Mantenimiento;
    end
  pre  operarioDisponible : self.dispositivo.operario->any(o |o.disponible) = true
  post OperarioNoDisponible : self.dispositivo.operario@pre->select( o | o.disponible)->size() > self.dispositivo.operario->select( o | o.disponible)->size()
end

------------- Asociaciones ---------------

association AsignadoA between
  Operario[1] role operario
  Dispositvo[1] role dispositivo
end

association TieneAtracciones between
  ParqueAtracciones [1] role parqueAtracciones
  Atraccion [0..*] role atraccion
end

association AvisaA between
  Vagon[0..*] role vagonEnvio
  CRA[1] role cra
end

composition ComponeAtraccion between
  Atraccion[1] role atraccion
  Vagon[1..*] role vagon
end

association SeLocalizaEn between
  Ciudad[1] role ciudad
  ParqueAtracciones[1] role parqueatracciones
end

association TieneDispositivos between
  Dispositvo[0..*] role dispositivo
  CRA[0..1]role cra
end

association Mantenimiento between
  Operario [0..1] role operario
  Vagon [0..1] role vagon
end


--------- Restricciones ---------------

constraints

context Atraccion
inv EnMarchaImplicaSinFallos:
  self.run=true implies self.vagon -> forAll(detectorActivado=false)

inv ParadaImplicaFallo:
  self.run=false implies self.vagon -> select(v | v.detectorActivado=true) -> size() > 0

context Dispositvo
inv ResueltosNoNegativos:
  self.nAvisosResueltos >= 0

context CRA
inv CRAUnica:
  CRA.allInstances() -> size() = 1
