model ObjectToClassModel

enum TipoDeAtraccion {MONTANARUSA, NORIA}

class Ciudad
end

class ParqueAtracciones
end

class Atraccion
attributes
  calle : String
  tipo : TipoDeAtraccion
  run : Boolean init = true
  operations
    para()
      begin 
        --self.Vagon -> forAll ( v | v.detectorActivado = true implies v.atraccion.run = false)
        self.run := false;
      end 
      --pre estaFuncionando : self.run = true esto sobra porque si dos vagones de la misma atraccion fallan da error
      post parado : not self.run 

    sigue()
      begin
      self.run := true;
      end
      pre estaParada : self.run = false
      post running : self.run

    comprobarEstado()
      begin
        if self.vagon -> select(v | v.detectorActivado = true) -> size() > 0 then
          self.para();
        else
          self.sigue();
        end;
      end 
      --no ponemos pre y post debido a que ya estan en las operaciones
      --para y sigue de atraccion.
  statemachines

  psm Atraccion

    states
      inicial: initial
      enMarcha [self.run]
      parada [not self.run]
    
    transitions
      inicial -> enMarcha
      enMarcha -> parada {para()}

      parada -> enMarcha{sigue()}
end
end

class Vagon
attributes
  detectorActivado : Boolean init = false
--  siendoRevisado : Boolean init = false
operations
  falla(cra: CRA)
    begin
      self.detectorActivado := true;
      insert(self,cra) into AvisaA; 
      self.atraccion.comprobarEstado();  
      self.cra.asignarOperario(self); 
    end
    pre: self.detectorActivado = false
    post: self.detectorActivado = true
end

class CRA
  operations
    asignarOperario(vagon: Vagon)
    begin
      if self.dispositivo.operario -> any(o |o.disponible).disponible = true then
        declare op: Operario;
        op := self.dispositivo.operario -> any(o |o.disponible);
        op.disponible := false;
        insert(op, vagon) into  Mantenimiento;
                      --vagon.siendoRevisado := true;
      end;
--      if self.dispositivo.operario -> select(o | o.disponible ) -> size() <=0 then
--        vagon.cra.asignarOperario(vagon);
--      end;
    end
      post : self.dispositivo.operario@pre-> select( o | o.disponible)->size() >= self.dispositivo.operario-> select( o | o.disponible)->size()

-- post OperarioDisponible : self.dispositivo.operario@pre -> any(o |o.disponible).disponible = true implies
--                          vagon.operario = vagon.operario@pre -> append(self.dispositivo.operario -> any(o | o.disponible)) 
--    post OperarioNoDisponible : self.dispositivo.operario@pre -> select( o |  o.disponible) -> size() <= 0 implies 
--                                vagon.cra.asignarOperario(vagon)
end

class Dispositvo
attributes
  nAvisosResueltos : Integer init = 0
operations
  sumaAvisoResuelto()
  begin
    self.nAvisosResueltos := self.nAvisosResueltos+1;
  end
  post: self.nAvisosResueltos = self.nAvisosResueltos@pre + 1
end

class Operario
attributes
  disponible : Boolean init = true
operations
  arregla()
    begin
      self.disponible := true;
      self.vagon.detectorActivado := false;
      self.dispositivo.sumaAvisoResuelto();
      self.vagon.atraccion.comprobarEstado();
      delete(self.vagon,self.dispositivo.cra) from AvisaA;
      delete(self,self.vagon) from Mantenimiento;
      if(Vagon.allInstances -> exists(v | v.detectorActivado = true and v.operario->size()=0)) then
        self.dispositivo.cra.asignarOperario(Vagon.allInstances -> any(v | v.detectorActivado = true and v.operario->size()=0 ))
      end
    end
    pre estabaRotoYOperarioLibre : self.vagon.detectorActivado = true and self.disponible = false
    -- post estaArreglado : self.vagon.detectorActivado = false and self.disponible = true
    post estaArreglado :   self.dispositivo.nAvisosResueltos = self.dispositivo.nAvisosResueltos@pre + 1

end

------------- Asociaciones ---------------

association AsignadoA between
  Operario[1] role operario
  Dispositvo[1] role dispositivo
end

association TieneAtracciones between
  ParqueAtracciones [1] role parqueAtracciones
  Atraccion [0..*] role atraccion
end

association AvisaA between
  Vagon[0..*] role vagonEnvio
  CRA[0..1] role cra
end

composition ComponeAtraccion between
  Atraccion[1] role atraccion
  Vagon[1..*] role vagon
end

association SeLocalizaEn between
  Ciudad[1] role ciudad
  ParqueAtracciones[1] role parqueatracciones
end

association TieneDispositivos between
  Dispositvo[0..*] role dispositivo
  CRA[0..1]role cra
end

association Mantenimiento between
  Operario [0..*] role operario ordered --he tenido que cambiar la multiplicidad para poder poner 
                                        --Vagon.operario como un ordered set y asi hacer el append
                                        --en la post de asignarOperario
  Vagon [0..1] role vagon 
end

--------- Restricciones ---------------

constraints

context Atraccion
inv EnMarchaImplicaSinFallos:
  self.run = true implies self.vagon -> forAll(detectorActivado = false)

inv ParadaImplicaFallo:
  self.run = false implies self.vagon -> select(v | v.detectorActivado = true) -> size() > 0


context Dispositvo
inv ResueltosNoNegativos:
  self.nAvisosResueltos >= 0

context CRA
inv CRAUnica:
  CRA.allInstances() -> size() = 1

----------- Maquinas de Estado -------------







